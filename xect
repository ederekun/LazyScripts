#!/bin/bash
#
# Xecutables
#

#
# Variable declarations
#

TEST_BUILD=y
DEBUG=n

SRC_DIR=$HOME/kernel
OUT_DIR=$HOME/output
REL_DIR=$HOME/releases
TEST_DIR=$HOME/test
SRT_DIR=$HOME/scripts
ZIP_DIR=$HOME/zip
PACK_DIR=$HOME/bimg
LOG_DIR=$HOME/buildlog

AUTH_STR="ederekun <sedrickvince@gmail.com>"

JN=12
LN=10

SRCN="x"
DC="oneplus5_defconfig"
CURR_DATE="$(date +'%Y%m%d')"
DATE_FULL="$(date -R)"
HEAD_VER=1
BRNCH_VER=$CURR_DATE
VER=1

AF="arch/arm64/configs"
ARCH="arm64"
SUBARCH=$ARCH
LWIMG="Image.gz-dtb"

CC_PATH="$HOME/toolchain/android-clang/clang-r433403/bin:$HOME/toolchain/android64-gcc/bin:$HOME/toolchain/android32-gcc/bin"
export PATH="$CC_PATH:$PATH"

C64="aarch64-linux-android-"
C32="arm-linux-androideabi-"
CC="${C64}gcc"

#
# Function declarations
#

border() {
    for ((i = 0; i < 50; i++)); do
        printf -
    done
    echo ""
}

decho() {
    border
	echo $1
    border
}

decho_log() {
    decho "$1"
    decho "$1" >> $LOG
}

create_dir() {
	decho "No $1 directory found! Creating $1"
	mkdir $1
}

update_repo() {
	cd $1
    decho "Updating $1 repository..."

    if [[ $1 == "$ZIP_DIR" ]]; then
        git pull --no-rebase upstream master
        git merge FETCH_HEAD
    fi

	git pull --ff-only
}

update_linux() {
    decho "Updating applications and binaries..."
    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get dist-upgrade
    sudo apt-get autoremove
    sudo apt-get clean
}

check_valid() {
	if [[ ${1:0:1} != "-" ]] && [[ $1 != "" ]]; then
		return 0
	else
		return 1
	fi
}

commit_repo() {
    cd $1
    decho "Commiting in $1 repository..."

	C_CMD=""
	while [[ $# -gt 0 ]]
		do
		key="$1"

		case $key in
			-a|--add)
				git add -A
			;;
			-m|--message)
				if check_valid "$2"; then
					C_MSG="$2"
					shift
				fi
			;;
			-e|--edit)
				C_CMD="-e $C_CMD"
			;;
		esac
		shift
	done

	git commit $C_CMD -s -m "$C_MSG" --author="$AUTH_STR" --date="$DATE_FULL"
}

send_tg_msg() {
    curl -X POST "https://api.telegram.org/bot$BOT_ID/sendMessage" \
		-d "chat_id=$CHAT_ID&text=$1" &> /dev/null
}

send_tg_file() {
	curl -F chat_id=$CHAT_ID -F document=@$1 \
		https://api.telegram.org/bot$BOT_ID/sendDocument &> /dev/null
}

err_tg_msg() {
	send_tg_msg "$KNAME was not built! Something went wrong..."
	send_tg_file $LOG
}

make_cmd() {
    decho_log "Executing make $1..."
    make $MKP $1 2>> $LOG
}

zip_image() {
    decho_log "Zipping the image..."
    zip -r9 $1.zip * -x .git README.md 2>> $LOG
}

push_update() {
    decho_log "Pushing update..."
    if [ -f $1 ]; then
        send_tg_msg "Build finished successfully! $BUILD_STR"
        send_tg_file $1
		# Always send logs
		send_tg_file $LOG
    else
        err_tg_msg
    fi
}

param_func() {
	while [[ $# -gt 0 ]]
		do
		key="$1"

		case $key in
			-s|--source)
				if check_valid "$2"; then
					SRCN="$2"
					shift
				fi
			;;
			-b|--branch)
				if check_valid "$2"; then
					SRC_BRNCH="$2"
					shift
				fi
			;;
			-v|--version)
				if check_valid "$2"; then
					FORCE_VER=y
					VER="$2"
					shift
				fi
			;;
			-cl|--clang)
				USE_CLANG=y
			;;
			-a|--all)
				BUILD_ALL=y
			;;
			-c|--configure)
				CONFIGURE=y
			;;
			-r|--release)
				TEST_BUILD=n
			;;
			-d|--debug)
				DEBUG=y
			;;
			-mo|--make-only)
				MAKE_ONLY=y
			;;
		esac
		shift
	done
}